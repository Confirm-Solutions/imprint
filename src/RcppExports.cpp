// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>& Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bckt_tune
List bckt_tune(int n_sim, double alpha, double delta, int ph2_size,
               int n_samples, int grid_dim, double grid_radius,
               const Eigen::Map<Eigen::VectorXd> p,
               const Eigen::Map<Eigen::MatrixXd> p_endpt,
               const Eigen::Map<Eigen::VectorXd> lmda_grid, int start_seed,
               int p_batch_size, int n_thr, bool do_progress_bar);
RcppExport SEXP _kevlar_bckt_tune(SEXP n_simSEXP, SEXP alphaSEXP,
                                  SEXP deltaSEXP, SEXP ph2_sizeSEXP,
                                  SEXP n_samplesSEXP, SEXP grid_dimSEXP,
                                  SEXP grid_radiusSEXP, SEXP pSEXP,
                                  SEXP p_endptSEXP, SEXP lmda_gridSEXP,
                                  SEXP start_seedSEXP, SEXP p_batch_sizeSEXP,
                                  SEXP n_thrSEXP, SEXP do_progress_barSEXP) {
    BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter<int>::type n_sim(n_simSEXP);
    Rcpp::traits::input_parameter<double>::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter<double>::type delta(deltaSEXP);
    Rcpp::traits::input_parameter<int>::type ph2_size(ph2_sizeSEXP);
    Rcpp::traits::input_parameter<int>::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter<int>::type grid_dim(grid_dimSEXP);
    Rcpp::traits::input_parameter<double>::type grid_radius(grid_radiusSEXP);
    Rcpp::traits::input_parameter<const Eigen::Map<Eigen::VectorXd> >::type p(
        pSEXP);
    Rcpp::traits::input_parameter<const Eigen::Map<Eigen::MatrixXd> >::type
        p_endpt(p_endptSEXP);
    Rcpp::traits::input_parameter<const Eigen::Map<Eigen::VectorXd> >::type
        lmda_grid(lmda_gridSEXP);
    Rcpp::traits::input_parameter<int>::type start_seed(start_seedSEXP);
    Rcpp::traits::input_parameter<int>::type p_batch_size(p_batch_sizeSEXP);
    Rcpp::traits::input_parameter<int>::type n_thr(n_thrSEXP);
    Rcpp::traits::input_parameter<bool>::type do_progress_bar(
        do_progress_barSEXP);
    rcpp_result_gen = Rcpp::wrap(bckt_tune(
        n_sim, alpha, delta, ph2_size, n_samples, grid_dim, grid_radius, p,
        p_endpt, lmda_grid, start_seed, p_batch_size, n_thr, do_progress_bar));
    return rcpp_result_gen;
    END_RCPP
}
// bckt_fit
void bckt_fit(int n_sim, double delta, int ph2_size, int n_samples,
              int grid_dim, double grid_radius,
              const Eigen::Map<Eigen::VectorXd> p,
              const Eigen::Map<Eigen::MatrixXd> p_endpt, double lmda,
              String serialize_fname, int start_seed, int p_batch_size,
              int n_thr, bool do_progress_bar);
RcppExport SEXP _kevlar_bckt_fit(SEXP n_simSEXP, SEXP deltaSEXP,
                                 SEXP ph2_sizeSEXP, SEXP n_samplesSEXP,
                                 SEXP grid_dimSEXP, SEXP grid_radiusSEXP,
                                 SEXP pSEXP, SEXP p_endptSEXP, SEXP lmdaSEXP,
                                 SEXP serialize_fnameSEXP, SEXP start_seedSEXP,
                                 SEXP p_batch_sizeSEXP, SEXP n_thrSEXP,
                                 SEXP do_progress_barSEXP) {
    BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter<int>::type n_sim(n_simSEXP);
    Rcpp::traits::input_parameter<double>::type delta(deltaSEXP);
    Rcpp::traits::input_parameter<int>::type ph2_size(ph2_sizeSEXP);
    Rcpp::traits::input_parameter<int>::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter<int>::type grid_dim(grid_dimSEXP);
    Rcpp::traits::input_parameter<double>::type grid_radius(grid_radiusSEXP);
    Rcpp::traits::input_parameter<const Eigen::Map<Eigen::VectorXd> >::type p(
        pSEXP);
    Rcpp::traits::input_parameter<const Eigen::Map<Eigen::MatrixXd> >::type
        p_endpt(p_endptSEXP);
    Rcpp::traits::input_parameter<double>::type lmda(lmdaSEXP);
    Rcpp::traits::input_parameter<String>::type serialize_fname(
        serialize_fnameSEXP);
    Rcpp::traits::input_parameter<int>::type start_seed(start_seedSEXP);
    Rcpp::traits::input_parameter<int>::type p_batch_size(p_batch_sizeSEXP);
    Rcpp::traits::input_parameter<int>::type n_thr(n_thrSEXP);
    Rcpp::traits::input_parameter<bool>::type do_progress_bar(
        do_progress_barSEXP);
    bckt_fit(n_sim, delta, ph2_size, n_samples, grid_dim, grid_radius, p,
             p_endpt, lmda, serialize_fname, start_seed, p_batch_size, n_thr,
             do_progress_bar);
    return R_NilValue;
    END_RCPP
}
// eckt_tune
List eckt_tune(int n_sim, double alpha, double delta, int n_samples,
               double grid_radius, double censor_time,
               const Eigen::Map<Eigen::VectorXd> lmda,
               const Eigen::Map<Eigen::VectorXd> lmda_lower,
               const Eigen::Map<Eigen::VectorXd> hzrd_rate,
               const Eigen::Map<Eigen::VectorXd> hzrd_rate_lower,
               const Eigen::Map<Eigen::VectorXd> thr_vec, int start_seed,
               int p_batch_size, int n_thr, bool do_progress_bar);
RcppExport SEXP _kevlar_eckt_tune(SEXP n_simSEXP, SEXP alphaSEXP,
                                  SEXP deltaSEXP, SEXP n_samplesSEXP,
                                  SEXP grid_radiusSEXP, SEXP censor_timeSEXP,
                                  SEXP lmdaSEXP, SEXP lmda_lowerSEXP,
                                  SEXP hzrd_rateSEXP, SEXP hzrd_rate_lowerSEXP,
                                  SEXP thr_vecSEXP, SEXP start_seedSEXP,
                                  SEXP p_batch_sizeSEXP, SEXP n_thrSEXP,
                                  SEXP do_progress_barSEXP) {
    BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter<int>::type n_sim(n_simSEXP);
    Rcpp::traits::input_parameter<double>::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter<double>::type delta(deltaSEXP);
    Rcpp::traits::input_parameter<int>::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter<double>::type grid_radius(grid_radiusSEXP);
    Rcpp::traits::input_parameter<double>::type censor_time(censor_timeSEXP);
    Rcpp::traits::input_parameter<const Eigen::Map<Eigen::VectorXd> >::type
        lmda(lmdaSEXP);
    Rcpp::traits::input_parameter<const Eigen::Map<Eigen::VectorXd> >::type
        lmda_lower(lmda_lowerSEXP);
    Rcpp::traits::input_parameter<const Eigen::Map<Eigen::VectorXd> >::type
        hzrd_rate(hzrd_rateSEXP);
    Rcpp::traits::input_parameter<const Eigen::Map<Eigen::VectorXd> >::type
        hzrd_rate_lower(hzrd_rate_lowerSEXP);
    Rcpp::traits::input_parameter<const Eigen::Map<Eigen::VectorXd> >::type
        thr_vec(thr_vecSEXP);
    Rcpp::traits::input_parameter<int>::type start_seed(start_seedSEXP);
    Rcpp::traits::input_parameter<int>::type p_batch_size(p_batch_sizeSEXP);
    Rcpp::traits::input_parameter<int>::type n_thr(n_thrSEXP);
    Rcpp::traits::input_parameter<bool>::type do_progress_bar(
        do_progress_barSEXP);
    rcpp_result_gen = Rcpp::wrap(
        eckt_tune(n_sim, alpha, delta, n_samples, grid_radius, censor_time,
                  lmda, lmda_lower, hzrd_rate, hzrd_rate_lower, thr_vec,
                  start_seed, p_batch_size, n_thr, do_progress_bar));
    return rcpp_result_gen;
    END_RCPP
}
// eckt_fit
void eckt_fit(int n_sim, double delta, int n_samples, double grid_radius,
              double censor_time, const Eigen::Map<Eigen::VectorXd> lmda,
              const Eigen::Map<Eigen::VectorXd> lmda_lower,
              const Eigen::Map<Eigen::VectorXd> hzrd_rate,
              const Eigen::Map<Eigen::VectorXd> hzrd_rate_lower, double thr,
              String serialize_fname, int start_seed, int p_batch_size,
              int n_thr, bool do_progress_bar);
RcppExport SEXP _kevlar_eckt_fit(SEXP n_simSEXP, SEXP deltaSEXP,
                                 SEXP n_samplesSEXP, SEXP grid_radiusSEXP,
                                 SEXP censor_timeSEXP, SEXP lmdaSEXP,
                                 SEXP lmda_lowerSEXP, SEXP hzrd_rateSEXP,
                                 SEXP hzrd_rate_lowerSEXP, SEXP thrSEXP,
                                 SEXP serialize_fnameSEXP, SEXP start_seedSEXP,
                                 SEXP p_batch_sizeSEXP, SEXP n_thrSEXP,
                                 SEXP do_progress_barSEXP) {
    BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter<int>::type n_sim(n_simSEXP);
    Rcpp::traits::input_parameter<double>::type delta(deltaSEXP);
    Rcpp::traits::input_parameter<int>::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter<double>::type grid_radius(grid_radiusSEXP);
    Rcpp::traits::input_parameter<double>::type censor_time(censor_timeSEXP);
    Rcpp::traits::input_parameter<const Eigen::Map<Eigen::VectorXd> >::type
        lmda(lmdaSEXP);
    Rcpp::traits::input_parameter<const Eigen::Map<Eigen::VectorXd> >::type
        lmda_lower(lmda_lowerSEXP);
    Rcpp::traits::input_parameter<const Eigen::Map<Eigen::VectorXd> >::type
        hzrd_rate(hzrd_rateSEXP);
    Rcpp::traits::input_parameter<const Eigen::Map<Eigen::VectorXd> >::type
        hzrd_rate_lower(hzrd_rate_lowerSEXP);
    Rcpp::traits::input_parameter<double>::type thr(thrSEXP);
    Rcpp::traits::input_parameter<String>::type serialize_fname(
        serialize_fnameSEXP);
    Rcpp::traits::input_parameter<int>::type start_seed(start_seedSEXP);
    Rcpp::traits::input_parameter<int>::type p_batch_size(p_batch_sizeSEXP);
    Rcpp::traits::input_parameter<int>::type n_thr(n_thrSEXP);
    Rcpp::traits::input_parameter<bool>::type do_progress_bar(
        do_progress_barSEXP);
    eckt_fit(n_sim, delta, n_samples, grid_radius, censor_time, lmda,
             lmda_lower, hzrd_rate, hzrd_rate_lower, thr, serialize_fname,
             start_seed, p_batch_size, n_thr, do_progress_bar);
    return R_NilValue;
    END_RCPP
}
// unserialize
List unserialize(String fname);
RcppExport SEXP _kevlar_unserialize(SEXP fnameSEXP) {
    BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter<String>::type fname(fnameSEXP);
    rcpp_result_gen = Rcpp::wrap(unserialize(fname));
    return rcpp_result_gen;
    END_RCPP
}
// grid_radius
double grid_radius(size_t n, double lower, double upper);
RcppExport SEXP _kevlar_grid_radius(SEXP nSEXP, SEXP lowerSEXP,
                                    SEXP upperSEXP) {
    BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter<size_t>::type n(nSEXP);
    Rcpp::traits::input_parameter<double>::type lower(lowerSEXP);
    Rcpp::traits::input_parameter<double>::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(grid_radius(n, lower, upper));
    return rcpp_result_gen;
    END_RCPP
}
// make_grid
Eigen::VectorXd make_grid(size_t n, double lower, double upper);
RcppExport SEXP _kevlar_make_grid(SEXP nSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
    BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter<size_t>::type n(nSEXP);
    Rcpp::traits::input_parameter<double>::type lower(lowerSEXP);
    Rcpp::traits::input_parameter<double>::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(make_grid(n, lower, upper));
    return rcpp_result_gen;
    END_RCPP
}
// make_endpts
Eigen::MatrixXd make_endpts(size_t n, double lower, double upper);
RcppExport SEXP _kevlar_make_endpts(SEXP nSEXP, SEXP lowerSEXP,
                                    SEXP upperSEXP) {
    BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter<size_t>::type n(nSEXP);
    Rcpp::traits::input_parameter<double>::type lower(lowerSEXP);
    Rcpp::traits::input_parameter<double>::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(make_endpts(n, lower, upper));
    return rcpp_result_gen;
    END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_kevlar_bckt_tune", (DL_FUNC)&_kevlar_bckt_tune, 14},
    {"_kevlar_bckt_fit", (DL_FUNC)&_kevlar_bckt_fit, 14},
    {"_kevlar_eckt_tune", (DL_FUNC)&_kevlar_eckt_tune, 15},
    {"_kevlar_eckt_fit", (DL_FUNC)&_kevlar_eckt_fit, 15},
    {"_kevlar_unserialize", (DL_FUNC)&_kevlar_unserialize, 1},
    {"_kevlar_grid_radius", (DL_FUNC)&_kevlar_grid_radius, 3},
    {"_kevlar_make_grid", (DL_FUNC)&_kevlar_make_grid, 3},
    {"_kevlar_make_endpts", (DL_FUNC)&_kevlar_make_endpts, 3},
    {NULL, NULL, 0}};

RcppExport void R_init_kevlar(DllInfo* dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
