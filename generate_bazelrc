#!/usr/bin/env python3

import os
import subprocess
from sys import platform

ROOT_DIR = os.path.dirname(os.path.abspath(__file__))
OUT_PATH = os.path.join(ROOT_DIR, ".bazelrc")


def run_cmd(cmd):
    try:
        output = subprocess.check_output(
            cmd.split(" "), stderr=subprocess.STDOUT
        ).decode()
    except subprocess.CalledProcessError as e:
        output = e.output.decode()
        raise RuntimeError(output)
    return output.rstrip()


def main():
    with open(OUT_PATH, "w") as f:
        # TODO: add ubsan + msan builds also
        f.write(
            """
build --cxxopt="-std=c++17"
build --cxxopt="-Wall"
build --cxxopt="-fopenmp"

# ASAN build
# TODO: add ubsan + msan builds also
build:asan --strip=never
build:asan --copt -fsanitize=address
build:asan --copt -DADDRESS_SANITIZER
build:asan --copt -O1
build:asan --copt -g
build:asan --copt -fno-omit-frame-pointer
build:asan --linkopt -fsanitize=address


"""
        )

        # MacOS
        if platform == "darwin":
            # get canonical brew path
            clang_prefix = run_cmd("brew --prefix llvm")
            clang_path = os.path.join(clang_prefix, "bin")

            # get canonical omp path
            omp_prefix = run_cmd("brew --prefix libomp")
            omp_path = os.path.join(omp_prefix, "lib")

            f.write(
                f"""
# Mac Homebrew Clang
build --action_env=CC={clang_path}/clang
build --action_env=CXX={clang_path}/clang++
build --linkopt -L{omp_path}
build --linkopt -lomp
# Tell Bazel not to use the full Xcode toolchain on Mac OS
build --repo_env=BAZEL_USE_CPP_ONLY_TOOLCHAIN=1
"""
            )
        else:
            # Linux
            f.write(
                """
# Linux GCC
build:gcc --action_env=CC=gcc
build:gcc --action_env=CXX=g++
build:gcc --linkopt -fopenmp

# Linux Clang (default)
build --action_env=CC=clang
build --action_env=CXX=clang++
build --linkopt -fopenmp
"""
            )


if __name__ == "__main__":
    main()
